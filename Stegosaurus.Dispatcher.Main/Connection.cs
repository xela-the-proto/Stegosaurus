
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v2.0.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

using System.ComponentModel;
using System.Drawing;
using Docker.DotNet;
using Docker.DotNet.Models;

namespace Connection {
    using Terminal.Gui; 
    
    public partial class Connection : Window {
        public Connection() {
            InitializeComponent();
            btn_start.Accept += Btn_startOnAccept; 
        }

        private void Btn_startOnAccept(object? sender, HandledEventArgs e)
        {
            attachdocker();
        }

        public async void attachdocker()
        {
            // Configura il client Docker
            var dockerClient = new DockerClientConfiguration().CreateClient();

            // ID o nome del container da monitorare
            string containerId = "aef2c6a1c48e6b12af8dcb4b5c6cea653c1605cbce38419116764aa9d40faae9"; // Sostituisci con l'ID o il nome del tuo container

            // Parametri per ottenere i log
            var parameters = new ContainerLogsParameters
            {
                ShowStdout = true,
                ShowStderr = true,
                Follow = true,
                Timestamps = false
            };

            // CancellationToken per fermare il processo quando vuoi
            using var cts = new CancellationTokenSource();

            try
            {
                // Ottieni i log come stream
                using var logStream = await dockerClient.Containers.GetContainerLogsAsync(containerId, parameters);

                // Leggi i log in modo continuo
                using var reader = new StreamReader(logStream);
                string? line;
                while ((line = await reader.ReadLineAsync()) != null)
                {
                    Log(line); // Stampa i log sulla console
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Errore: {ex.Message}");
            }
        }
       
        // Funzione per aggiungere nuovi log
        void Log(string message)
        {
            txt_log.Text += $"{DateTime.Now:HH:mm:ss} - {message}\n";
            txt_log.CursorPosition = new Point(0, txt_log.Text.ToString().Split('\n').Length - 1);
        }
        
    }
}
